
%create a function (for now using generic input/output names)
function output_variable = connect_four(input_variable)


%Use a matrix to create the playing board
random_matrix_to_assign = randi((10),[6,6]);
vec_A = [0 1 1 1 1 0];
vec_B = [0 0 0 0 0 0];
random_matrix_to_assign((1),:) = vec_B;
random_matrix_to_assign((2),:) = vec_A;
random_matrix_to_assign((3),:) = vec_A;
random_matrix_to_assign((4),:) = vec_A;
random_matrix_to_assign((5),:) = vec_A;
random_matrix_to_assign((6),:) = vec_A;
random_matrix_to_assign((7),:) = vec_B;


the_mat2 = repmat(random_matrix_to_assign,6,7);
%inverted_the_mat2 = not(the_mat2);


imagesc(the_mat2)
axis off

%using a function to create playing chips
    %RED CHIP
function circles = circle(x,y,r,c)
hold on
th = 0:pi/50:2*pi;
x_circle = r * cos(th) + x;
y_circle = r * sin(th) + y;
circles = plot(x_circle, y_circle);
fill(x_circle, y_circle, c)
hold off
axis equal
end
circleout = circle(3, 4, 2, 'r') 

    %YELLOW CHIP

function circles2 = circle2(x,y,r,c)
hold on
th = 0:pi/50:2*pi;
x_circle2 = r * cos(th) + x;
y_circle2 = r * sin(th) + y;
circles2 = plot(x_circle2, y_circle2);
fill(x_circle2, y_circle2, c)
hold off
axis equal
end
circleout2 = circle2(3, 4, 2, 'y') 


% get the location of the mouse in the units of the axes
coords = get_coords(callback.hAxes);
% find the axis bounds
xl = xlim;
yl = ylim;
% this if-statement structure:
%   - keeps the circle inside the figure but above the game board
%   - changes what type of pointer is displayed
%       - invisible if moving the circle
%       - a hand if otherwise
set(fig,'Pointer','custom','PointerShapeCData',callback.pointer_array)
if coords(1) < (xl(1)+callback.radius)
    set(fig,'Pointer','hand')
    coords(1) = xl(1) + callback.radius;
end
if coords(1) > (xl(2) - callback.radius);
    set(fig,'Pointer','hand')
    coords(1) = xl(2) - callback.radius;
end
if coords(2) < 7.5
    set(fig,'Pointer','hand')
    coords(2) = 7.5;
end
if coords(2) > (yl(2) - callback.radius);
    set(fig,'Pointer','hand')
    coords(2) = yl(2) - callback.radius;
end
% construct a circle around the mouse
cx = coords(1) + callback.radius * cos(callback.t);
cy = coords(2) + callback.radius * sin(callback.t);








end